//Sophia Xia
//APCS2 pd1
//HW05 -- <title>
//2018-02-06

/*======================================
  class MergeSort
  Implements mergesort on array of ints.

  Summary of Algorithm:

  ======================================*/

public class MergeSort{
    /******************************************************
     * int[] merge(int[],int[])
     * Merges two input arrays
     * Precond:  Input arrays are sorted in ascending order
     * Postcond: Input arrays unchanged, and
     * output array sorted in ascending order.
     ******************************************************/
    private static int[] merge( int[] a, int[] b ){
	int[] c = new int[a.length + b.length];
	int posa = a.length -1; // keeps track of the position of array a
	int posb = b.length -1; // keeps track of the position of array b
	int posc = c.length -1; // keeps track of the position of array c

	//for loop compares the values at the current position of array a and b and adds that larger one to array c going from the right to the left.
	for(; posa >= 0 && posb >= 0; posc --){
	    if (a[posa] > b[posb]){
		c[posc] = a[posa];
		posa --;
	    }
	    else if(b[posb] > a[posa]){
		c[posc] = b[posb];
		posb --;
	    }
	    printArray(c);
	}
	// these if statements checks to see when one of the arrays is done and adds the rest of the other array to array c
	if (posa >= 0){
	    for(;posa >= 0; posa --){
		c[posc] = a[posa];
		posc --;
	    }
	    printArray(c);
	}
	if (posb >= 0){
	    for(;posb >= 0; posb --){
		c[posc] = b[posb];
		posc --;
	    }
	    printArray(c);
	}
	return c;
    }//end merge()
    

    /******************************************************
     * int[] sort(int[])
     * Sorts input array using mergesort algorithm
     * Returns sorted version of input array (ascending)
     ******************************************************/
    public static int[] sort( int[] arr ){
	int[]a = new int[5];
	return a;
    }//end sort()



    //-------------------HELPERS-------------------------
    //tester function for exploring how arrays are passed
    //usage: print array, mess(array), print array. Whaddayasee?
    public static void mess( int[] a ) {
	for( int i = 0 ; i<a.length; i++ )
	    a[i] = 0;
    }

    //helper method for displaying an array
    public static void printArray( int[] a ) {
	System.out.print("[");
	for( int i : a )
	    System.out.print( i + ",");
	System.out.println("]");
    }
    //---------------------------------------------------


    //main method for testing
    public static void main( String [] args ) {

	  int[] arr0 = {0};
	  int[] arr1 = {1};
	  //int[] arr2 = {1,2};
	  //int[] arr3 = {3,4};
	  int[] arr2 = {1,2,3,4,5,6};
	  int[] arr3 = {3,4,5,6,7,8};
	  int[] arr4 = {1,2,3,4};
	  int[] arr5 = {4,3,2,1};
	  int[] arr6 = {9,42,17,63,0,512,23};
	  int[] arr7 = {9,42,17,63,0,9,512,23,9};
	  
	  System.out.println("\nTesting mess-with-array method...");
	  printArray( arr3 );
	  mess(arr3);
	  printArray( arr3 );

	  System.out.println("\nMerging arr1 and arr0: ");
	  printArray( merge(arr1,arr0) ); //[0,1]
	  printArray( merge(arr2,arr3) ); //[1,2,3,4]
	  
	  /*~~~~~~~~~~~~~~ Ye Olde Tester Bar ~~~~~~~~~~~~~~
	  
	  System.out.println("\nMerging arr4 and arr6: ");
	  printArray( merge(arr4,arr6) );
	  
	  System.out.println("\nSorting arr4-7...");
	  printArray( sort( arr4 ) );
	  printArray( sort( arr5 ) );
	  printArray( sort( arr6 ) );
	  printArray( sort( arr7 ) );
	  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    }//end main()

}//end class MergeSort
